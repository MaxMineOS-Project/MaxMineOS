import socket
import threading

open_tcp = []
open_udp = []

def scan_tcp(ip, port):
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(0.3)
            if s.connect_ex((ip, port)) == 0:
                open_tcp.append(port)
    except:
        pass

def scan_udp(ip, port):
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
            s.settimeout(0.5)
            s.sendto(b'', (ip, port))
            s.recvfrom(1024)  # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç
            open_udp.append(port)
    except socket.timeout:
        open_udp.append(port)  # –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ ‚Äî UDP –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç
    except:
        pass

def main(argv:list[str]):
    target = argv[1].strip()

    try:
        ip = socket.gethostbyname(target)
    except:
        print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Ö–æ—Å—Ç.")
        return 1

    print(f"–°–∫–∞–Ω–∏—Ä—É—é {ip} –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã TCP/UDP...")

    threads = []
    for port in range(1, 65536):
        t = threading.Thread(target=scan_tcp, args=(ip, port))
        threads.append(t); t.start()
    for t in threads: t.join()

    threads = []
    for port in range(1, 65536):
        t = threading.Thread(target=scan_udp, args=(ip, port))
        threads.append(t); t.start()
    for t in threads: t.join()

    print("\nüì° –û—Ç–∫—Ä—ã—Ç—ã–µ TCP-–ø–æ—Ä—Ç—ã:")
    for p in sorted(open_tcp): print(f"  {p}")

    print("\nüì° –û—Ç–∫—Ä—ã—Ç—ã–µ –∏–ª–∏ –Ω–µ–æ—Ç–≤–µ—á–∞—é—â–∏–µ UDP-–ø–æ—Ä—Ç—ã:")
    for p in sorted(open_udp): print(f"  {p}")

    return 0
